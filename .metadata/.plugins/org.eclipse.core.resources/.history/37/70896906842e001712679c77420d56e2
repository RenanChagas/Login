package br.com.distribuidas.controller;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.io.PrintStream;
import java.net.Socket;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import br.com.distribuidas.model.Email;
import br.com.distribuidas.model.User;
import br.com.distribuidas.model.UserProfile;
import br.com.distribuidas.service.EmailService;
import br.com.distribuidas.service.UserProfileService;
import br.com.distribuidas.service.UserService;

@Controller
public class AccessController {
	
	@Autowired
	UserProfileService userProfileService;
	
	@Autowired
	UserService userService;
	
	@Autowired
	EmailService emailService;
	
	@ModelAttribute("roles")
	public List<UserProfile> initializeProfiles() {
		return userProfileService.findAll();
	}
	
	@ModelAttribute("user")
	public User getUserName() {
		return userService.findByUsername(getPrincipal());
	}
	
	@RequestMapping(value = { "/", "/home" })
	public String homePage(ModelMap model) {
		model.addAttribute("emails", emailService.findByReceive(getUserName().getUsername()));
		return "welcome";
	}
	
	//Email Request GET
	@RequestMapping(value = { "/email" }, method = RequestMethod.GET)
	public String emailPage(ModelMap model) {
		
		Email email = new Email();
		model.addAttribute("email", email);
		return "email";
	}
	
	
	@RequestMapping(value = { "/email" }, method = RequestMethod.POST)
	public String newEmail(@Valid Email email, BindingResult result, ModelMap model) {
		
		email.setSender(getUserName().getUsername());
		email.setId(4);
		
		try
        {
			Socket sock = new Socket("localhost",9999);
			ObjectOutputStream out = new ObjectOutputStream(sock.getOutputStream());
			out.writeObject(email);
			sock.close();
			
        }
		catch(Exception ex)
        {
            
        }
		
		return "redirect:/home";
	}
	
	
	//Email Request POST
	//@RequestMapping(value = { "/email" }, method = RequestMethod.POST)
	//public String newEmail(@Valid Email email, BindingResult result, ModelMap model) {
	//	
	//	email.setSender(getUserName().getUsername());
	//	email.setId(4);
	//	
	//	emailService.save(email);
	//	
	//	return "email";
	//}
	
	
	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public String loginPage() {
		return "login";
	}
	
	@RequestMapping(value="/logout", method = RequestMethod.GET)
	public String logout (HttpServletRequest request, HttpServletResponse response) {
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		if (auth != null){    
			new SecurityContextLogoutHandler().logout(request, response, auth);
		}
		return "redirect:/login?logout";
	}
	
	@RequestMapping(value = "/accessDenied", method = RequestMethod.GET)
	public String accessDenied(ModelMap model) {
		return "accessDenied";
	}

	
	
	@RequestMapping(value = "/sockTeste", method = RequestMethod.GET) 
	public String sockClient(ModelMap model) {
		
		try
        {
            Socket sock = new Socket("localhost",9999);
            
            ObjectOutputStream out = new ObjectOutputStream(sock.getOutputStream());
            
            //out.writeObject(email);
            
        }
        catch(Exception ex)
        {
            
        }
		
		return "redirect:/welcome";
	}
	private String getPrincipal(){
		String userName = null;
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		if (principal instanceof UserDetails) {
			userName = ((UserDetails)principal).getUsername();
		} else {
			userName = principal.toString();
		}
		return userName;
	}
	
}
